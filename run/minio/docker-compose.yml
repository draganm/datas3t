
services:
  # MinIO S3-compatible storage
  minio:
    image: minio/minio:latest
    volumes:
      - minio-data:/data
    ports:
      - "49000:9000"  # API
      - "49001:9001"  # Console
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  # Create bucket for litestream and datas3t
  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      set -e;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb --ignore-existing myminio/datas3t-bucket;
      exit 0;
      "

  # Initial restore service to run before datas3t starts
  restore:
    image: litestream/litestream:latest
    volumes:
      - db-data:/data
      - ./litestream.yml:/etc/litestream.yml
    depends_on:
      minio:
        condition: service_healthy
      createbuckets:
        condition: service_completed_successfully
    command: restore -if-replica-exists  -if-db-not-exists /data/datas3t.db

  # Main datas3t service
  server:
    build:
      context: ../..
      dockerfile: Dockerfile
    depends_on:
      restore:
        condition: service_completed_successfully
    volumes:
      - db-data:/app/data
      - uploads-data:/app/data/uploads
    entrypoint: ["/app/server"]
    command: ["run"]
    ports:
      - "48080:8080"
    environment:
      - DATAS3T_DB_URL=file:/app/data/datas3t.db
      - DATAS3T_ADDR=:8080
      - DATAS3T_S3_ENDPOINT=minio:9000
      - DATAS3T_S3_REGION=us-east-1
      - DATAS3T_S3_ACCESS_KEY_ID=minioadmin
      - DATAS3T_S3_SECRET_KEY=minioadmin
      - DATAS3T_S3_BUCKET_NAME=datas3t-bucket
      - DATAS3T_S3_USE_SSL=false
      - DATAS3T_UPLOADS_PATH=/app/data/uploads
      - AWS_REQUEST_CHECKSUM_CALCULATION=when_required
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  # Aggregator service
  aggregator:
    build:
      context: ../..
      dockerfile: Dockerfile
    depends_on:
      server:
        condition: service_healthy
    environment:
      - DATAS3T_SERVER_URL=http://server:8080
      - DATAS3T_AGGREGATION_INTERVAL=5m
    entrypoint: ["/app/aggregator"]
    restart: unless-stopped

  # Continuous replication service
  replicate:
    image: litestream/litestream:latest
    depends_on:
      server:
        condition: service_healthy
    volumes:
      - db-data:/data
      - ./litestream.yml:/etc/litestream.yml
    command: replicate
    restart: unless-stopped

volumes:
  db-data:
    driver: local
  minio-data:
    driver: local 
  uploads-data:
    driver: local