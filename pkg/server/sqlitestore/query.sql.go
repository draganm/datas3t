// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlitestore

import (
	"context"
)

const createDataset = `-- name: CreateDataset :exec
INSERT INTO datasets (name) VALUES (?)
`

func (q *Queries) CreateDataset(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createDataset, name)
	return err
}

const datasetExists = `-- name: DatasetExists :one
SELECT count(*) > 0 FROM datasets WHERE name = ?
`

func (q *Queries) DatasetExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, datasetExists, name)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const insertDataRange = `-- name: InsertDataRange :exec
INSERT INTO dataranges (dataset_name, object_key, min_datapoint_key, max_datapoint_key) 
VALUES (?, ?, ?, ?)
`

type InsertDataRangeParams struct {
	DatasetName     string
	ObjectKey       string
	MinDatapointKey int64
	MaxDatapointKey int64
}

func (q *Queries) InsertDataRange(ctx context.Context, arg InsertDataRangeParams) error {
	_, err := q.db.ExecContext(ctx, insertDataRange,
		arg.DatasetName,
		arg.ObjectKey,
		arg.MinDatapointKey,
		arg.MaxDatapointKey,
	)
	return err
}
